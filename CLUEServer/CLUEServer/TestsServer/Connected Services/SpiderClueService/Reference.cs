//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestsServer.SpiderClueService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUserTransaction", ReplyAction="http://tempuri.org/IUserManager/AddUserTransactionResponse")]
        int AddUserTransaction(GameService.Contracts.Gamer gamer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUserTransaction", ReplyAction="http://tempuri.org/IUserManager/AddUserTransactionResponse")]
        System.Threading.Tasks.Task<int> AddUserTransactionAsync(GameService.Contracts.Gamer gamer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateAccount", ReplyAction="http://tempuri.org/IUserManager/AuthenticateAccountResponse")]
        bool AuthenticateAccount(string gamertag, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateAccount", ReplyAction="http://tempuri.org/IUserManager/AuthenticateAccountResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateAccountAsync(string gamertag, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/RequestGuestPlayer", ReplyAction="http://tempuri.org/IUserManager/RequestGuestPlayerResponse")]
        string RequestGuestPlayer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/RequestGuestPlayer", ReplyAction="http://tempuri.org/IUserManager/RequestGuestPlayerResponse")]
        System.Threading.Tasks.Task<string> RequestGuestPlayerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsEmailExisting", ReplyAction="http://tempuri.org/IUserManager/IsEmailExistingResponse")]
        bool IsEmailExisting(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsEmailExisting", ReplyAction="http://tempuri.org/IUserManager/IsEmailExistingResponse")]
        System.Threading.Tasks.Task<bool> IsEmailExistingAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePassword", ReplyAction="http://tempuri.org/IUserManager/UpdatePasswordResponse")]
        int UpdatePassword(string gamertag, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePassword", ReplyAction="http://tempuri.org/IUserManager/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<int> UpdatePasswordAsync(string gamertag, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsGamertagExisting", ReplyAction="http://tempuri.org/IUserManager/IsGamertagExistingResponse")]
        bool IsGamertagExisting(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsGamertagExisting", ReplyAction="http://tempuri.org/IUserManager/IsGamertagExistingResponse")]
        System.Threading.Tasks.Task<bool> IsGamertagExistingAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetGamerByGamertag", ReplyAction="http://tempuri.org/IUserManager/GetGamerByGamertagResponse")]
        GameService.Contracts.Gamer GetGamerByGamertag(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetGamerByGamertag", ReplyAction="http://tempuri.org/IUserManager/GetGamerByGamertagResponse")]
        System.Threading.Tasks.Task<GameService.Contracts.Gamer> GetGamerByGamertagAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetGamerByEmail", ReplyAction="http://tempuri.org/IUserManager/GetGamerByEmailResponse")]
        GameService.Contracts.Gamer GetGamerByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetGamerByEmail", ReplyAction="http://tempuri.org/IUserManager/GetGamerByEmailResponse")]
        System.Threading.Tasks.Task<GameService.Contracts.Gamer> GetGamerByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ModifyAccount", ReplyAction="http://tempuri.org/IUserManager/ModifyAccountResponse")]
        int ModifyAccount(string gamertag, string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ModifyAccount", ReplyAction="http://tempuri.org/IUserManager/ModifyAccountResponse")]
        System.Threading.Tasks.Task<int> ModifyAccountAsync(string gamertag, string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ChangeIcon", ReplyAction="http://tempuri.org/IUserManager/ChangeIconResponse")]
        int ChangeIcon(string gamertag, string titleIcon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ChangeIcon", ReplyAction="http://tempuri.org/IUserManager/ChangeIconResponse")]
        System.Threading.Tasks.Task<int> ChangeIconAsync(string gamertag, string titleIcon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetIcon", ReplyAction="http://tempuri.org/IUserManager/GetIconResponse")]
        string GetIcon(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetIcon", ReplyAction="http://tempuri.org/IUserManager/GetIconResponse")]
        System.Threading.Tasks.Task<string> GetIconAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/DeleteGuestPlayer", ReplyAction="http://tempuri.org/IUserManager/DeleteGuestPlayerResponse")]
        int DeleteGuestPlayer(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/DeleteGuestPlayer", ReplyAction="http://tempuri.org/IUserManager/DeleteGuestPlayerResponse")]
        System.Threading.Tasks.Task<int> DeleteGuestPlayerAsync(string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : TestsServer.SpiderClueService.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.IUserManager>, TestsServer.SpiderClueService.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUserTransaction(GameService.Contracts.Gamer gamer) {
            return base.Channel.AddUserTransaction(gamer);
        }
        
        public System.Threading.Tasks.Task<int> AddUserTransactionAsync(GameService.Contracts.Gamer gamer) {
            return base.Channel.AddUserTransactionAsync(gamer);
        }
        
        public bool AuthenticateAccount(string gamertag, string password) {
            return base.Channel.AuthenticateAccount(gamertag, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateAccountAsync(string gamertag, string password) {
            return base.Channel.AuthenticateAccountAsync(gamertag, password);
        }
        
        public string RequestGuestPlayer() {
            return base.Channel.RequestGuestPlayer();
        }
        
        public System.Threading.Tasks.Task<string> RequestGuestPlayerAsync() {
            return base.Channel.RequestGuestPlayerAsync();
        }
        
        public bool IsEmailExisting(string email) {
            return base.Channel.IsEmailExisting(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailExistingAsync(string email) {
            return base.Channel.IsEmailExistingAsync(email);
        }
        
        public int UpdatePassword(string gamertag, string password) {
            return base.Channel.UpdatePassword(gamertag, password);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePasswordAsync(string gamertag, string password) {
            return base.Channel.UpdatePasswordAsync(gamertag, password);
        }
        
        public bool IsGamertagExisting(string gamertag) {
            return base.Channel.IsGamertagExisting(gamertag);
        }
        
        public System.Threading.Tasks.Task<bool> IsGamertagExistingAsync(string gamertag) {
            return base.Channel.IsGamertagExistingAsync(gamertag);
        }
        
        public GameService.Contracts.Gamer GetGamerByGamertag(string gamertag) {
            return base.Channel.GetGamerByGamertag(gamertag);
        }
        
        public System.Threading.Tasks.Task<GameService.Contracts.Gamer> GetGamerByGamertagAsync(string gamertag) {
            return base.Channel.GetGamerByGamertagAsync(gamertag);
        }
        
        public GameService.Contracts.Gamer GetGamerByEmail(string email) {
            return base.Channel.GetGamerByEmail(email);
        }
        
        public System.Threading.Tasks.Task<GameService.Contracts.Gamer> GetGamerByEmailAsync(string email) {
            return base.Channel.GetGamerByEmailAsync(email);
        }
        
        public int ModifyAccount(string gamertag, string firstName, string lastName) {
            return base.Channel.ModifyAccount(gamertag, firstName, lastName);
        }
        
        public System.Threading.Tasks.Task<int> ModifyAccountAsync(string gamertag, string firstName, string lastName) {
            return base.Channel.ModifyAccountAsync(gamertag, firstName, lastName);
        }
        
        public int ChangeIcon(string gamertag, string titleIcon) {
            return base.Channel.ChangeIcon(gamertag, titleIcon);
        }
        
        public System.Threading.Tasks.Task<int> ChangeIconAsync(string gamertag, string titleIcon) {
            return base.Channel.ChangeIconAsync(gamertag, titleIcon);
        }
        
        public string GetIcon(string gamertag) {
            return base.Channel.GetIcon(gamertag);
        }
        
        public System.Threading.Tasks.Task<string> GetIconAsync(string gamertag) {
            return base.Channel.GetIconAsync(gamertag);
        }
        
        public int DeleteGuestPlayer(string gamertag) {
            return base.Channel.DeleteGuestPlayer(gamertag);
        }
        
        public System.Threading.Tasks.Task<int> DeleteGuestPlayerAsync(string gamertag) {
            return base.Channel.DeleteGuestPlayerAsync(gamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IEmailVerificationManager")]
    public interface IEmailVerificationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/GenerateVerificationCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/GenerateVerificationCodeResponse")]
        bool GenerateVerificationCode(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/GenerateVerificationCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/GenerateVerificationCodeResponse")]
        System.Threading.Tasks.Task<bool> GenerateVerificationCodeAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyCodeResponse")]
        bool VerifyCode(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyCodeResponse")]
        System.Threading.Tasks.Task<bool> VerifyCodeAsync(string email, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailVerificationManagerChannel : TestsServer.SpiderClueService.IEmailVerificationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailVerificationManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.IEmailVerificationManager>, TestsServer.SpiderClueService.IEmailVerificationManager {
        
        public EmailVerificationManagerClient() {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool GenerateVerificationCode(string email) {
            return base.Channel.GenerateVerificationCode(email);
        }
        
        public System.Threading.Tasks.Task<bool> GenerateVerificationCodeAsync(string email) {
            return base.Channel.GenerateVerificationCodeAsync(email);
        }
        
        public bool VerifyCode(string email, string code) {
            return base.Channel.VerifyCode(email, code);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyCodeAsync(string email, string code) {
            return base.Channel.VerifyCodeAsync(email, code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IFriendsManager", CallbackContract=typeof(TestsServer.SpiderClueService.IFriendsManagerCallback))]
    public interface IFriendsManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/GetConnectedFriends")]
        void GetConnectedFriends(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/GetConnectedFriends")]
        System.Threading.Tasks.Task GetConnectedFriendsAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/JoinFriendsConnected")]
        void JoinFriendsConnected(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/JoinFriendsConnected")]
        System.Threading.Tasks.Task JoinFriendsConnectedAsync(string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ReceiveConnectedFriends", ReplyAction="http://tempuri.org/IFriendsManager/ReceiveConnectedFriendsResponse")]
        void ReceiveConnectedFriends(string[] connectedFriends);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsManagerChannel : TestsServer.SpiderClueService.IFriendsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendsManagerClient : System.ServiceModel.DuplexClientBase<TestsServer.SpiderClueService.IFriendsManager>, TestsServer.SpiderClueService.IFriendsManager {
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetConnectedFriends(string gamertag) {
            base.Channel.GetConnectedFriends(gamertag);
        }
        
        public System.Threading.Tasks.Task GetConnectedFriendsAsync(string gamertag) {
            return base.Channel.GetConnectedFriendsAsync(gamertag);
        }
        
        public void JoinFriendsConnected(string gamertag) {
            base.Channel.JoinFriendsConnected(gamertag);
        }
        
        public System.Threading.Tasks.Task JoinFriendsConnectedAsync(string gamertag) {
            return base.Channel.JoinFriendsConnectedAsync(gamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IFriendshipManager")]
    public interface IFriendshipManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetFriendList", ReplyAction="http://tempuri.org/IFriendshipManager/GetFriendListResponse")]
        string[] GetFriendList(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetFriendList", ReplyAction="http://tempuri.org/IFriendshipManager/GetFriendListResponse")]
        System.Threading.Tasks.Task<string[]> GetFriendListAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendshipManager/DeleteFriendResponse")]
        int DeleteFriend(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendshipManager/DeleteFriendResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendAsync(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/AddFriend", ReplyAction="http://tempuri.org/IFriendshipManager/AddFriendResponse")]
        int AddFriend(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/AddFriend", ReplyAction="http://tempuri.org/IFriendshipManager/AddFriendResponse")]
        System.Threading.Tasks.Task<int> AddFriendAsync(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/AreNotFriends", ReplyAction="http://tempuri.org/IFriendshipManager/AreNotFriendsResponse")]
        bool AreNotFriends(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/AreNotFriends", ReplyAction="http://tempuri.org/IFriendshipManager/AreNotFriendsResponse")]
        System.Threading.Tasks.Task<bool> AreNotFriendsAsync(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/ThereIsNoFriendRequest", ReplyAction="http://tempuri.org/IFriendshipManager/ThereIsNoFriendRequestResponse")]
        bool ThereIsNoFriendRequest(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/ThereIsNoFriendRequest", ReplyAction="http://tempuri.org/IFriendshipManager/ThereIsNoFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> ThereIsNoFriendRequestAsync(string gamertag, string friendGamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendshipManagerChannel : TestsServer.SpiderClueService.IFriendshipManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendshipManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.IFriendshipManager>, TestsServer.SpiderClueService.IFriendshipManager {
        
        public FriendshipManagerClient() {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetFriendList(string gamertag) {
            return base.Channel.GetFriendList(gamertag);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFriendListAsync(string gamertag) {
            return base.Channel.GetFriendListAsync(gamertag);
        }
        
        public int DeleteFriend(string gamertag, string friendGamertag) {
            return base.Channel.DeleteFriend(gamertag, friendGamertag);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendAsync(string gamertag, string friendGamertag) {
            return base.Channel.DeleteFriendAsync(gamertag, friendGamertag);
        }
        
        public int AddFriend(string gamertag, string friendGamertag) {
            return base.Channel.AddFriend(gamertag, friendGamertag);
        }
        
        public System.Threading.Tasks.Task<int> AddFriendAsync(string gamertag, string friendGamertag) {
            return base.Channel.AddFriendAsync(gamertag, friendGamertag);
        }
        
        public bool AreNotFriends(string gamertag, string friendGamertag) {
            return base.Channel.AreNotFriends(gamertag, friendGamertag);
        }
        
        public System.Threading.Tasks.Task<bool> AreNotFriendsAsync(string gamertag, string friendGamertag) {
            return base.Channel.AreNotFriendsAsync(gamertag, friendGamertag);
        }
        
        public bool ThereIsNoFriendRequest(string gamertag, string friendGamertag) {
            return base.Channel.ThereIsNoFriendRequest(gamertag, friendGamertag);
        }
        
        public System.Threading.Tasks.Task<bool> ThereIsNoFriendRequestAsync(string gamertag, string friendGamertag) {
            return base.Channel.ThereIsNoFriendRequestAsync(gamertag, friendGamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IMatchManager", CallbackContract=typeof(TestsServer.SpiderClueService.IMatchManagerCallback))]
    public interface IMatchManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetMatchInformation", ReplyAction="http://tempuri.org/IMatchManager/GetMatchInformationResponse")]
        GameService.Contracts.Match GetMatchInformation(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetMatchInformation", ReplyAction="http://tempuri.org/IMatchManager/GetMatchInformationResponse")]
        System.Threading.Tasks.Task<GameService.Contracts.Match> GetMatchInformationAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ConnectToMatch")]
        void ConnectToMatch(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ConnectToMatch")]
        System.Threading.Tasks.Task ConnectToMatchAsync(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/LeaveMatch", ReplyAction="http://tempuri.org/IMatchManager/LeaveMatchResponse")]
        void LeaveMatch(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/LeaveMatch", ReplyAction="http://tempuri.org/IMatchManager/LeaveMatchResponse")]
        System.Threading.Tasks.Task LeaveMatchAsync(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/GetGamersInMatch")]
        void GetGamersInMatch(string gamertag, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/GetGamersInMatch")]
        System.Threading.Tasks.Task GetGamersInMatchAsync(string gamertag, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ReceiveGamersInMatch", ReplyAction="http://tempuri.org/IMatchManager/ReceiveGamersInMatchResponse")]
        void ReceiveGamersInMatch(System.Collections.Generic.Dictionary<string, GameService.Contracts.Pawn> characters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerChannel : TestsServer.SpiderClueService.IMatchManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchManagerClient : System.ServiceModel.DuplexClientBase<TestsServer.SpiderClueService.IMatchManager>, TestsServer.SpiderClueService.IMatchManager {
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public GameService.Contracts.Match GetMatchInformation(string code) {
            return base.Channel.GetMatchInformation(code);
        }
        
        public System.Threading.Tasks.Task<GameService.Contracts.Match> GetMatchInformationAsync(string code) {
            return base.Channel.GetMatchInformationAsync(code);
        }
        
        public void ConnectToMatch(string gamertag, string matchCode) {
            base.Channel.ConnectToMatch(gamertag, matchCode);
        }
        
        public System.Threading.Tasks.Task ConnectToMatchAsync(string gamertag, string matchCode) {
            return base.Channel.ConnectToMatchAsync(gamertag, matchCode);
        }
        
        public void LeaveMatch(string gamertag, string matchCode) {
            base.Channel.LeaveMatch(gamertag, matchCode);
        }
        
        public System.Threading.Tasks.Task LeaveMatchAsync(string gamertag, string matchCode) {
            return base.Channel.LeaveMatchAsync(gamertag, matchCode);
        }
        
        public void GetGamersInMatch(string gamertag, string code) {
            base.Channel.GetGamersInMatch(gamertag, code);
        }
        
        public System.Threading.Tasks.Task GetGamersInMatchAsync(string gamertag, string code) {
            return base.Channel.GetGamersInMatchAsync(gamertag, code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IFriendRequestManager")]
    public interface IFriendRequestManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/GetFriendsRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/GetFriendsRequestResponse")]
        string[] GetFriendsRequest(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/GetFriendsRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/GetFriendsRequestResponse")]
        System.Threading.Tasks.Task<string[]> GetFriendsRequestAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/CreateFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/CreateFriendRequestResponse")]
        int CreateFriendRequest(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/CreateFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/CreateFriendRequestResponse")]
        System.Threading.Tasks.Task<int> CreateFriendRequestAsync(string gamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/ResponseFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/ResponseFriendRequestResponse")]
        int ResponseFriendRequest(string gamertag, string friendGamertag, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/ResponseFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/ResponseFriendRequestResponse")]
        System.Threading.Tasks.Task<int> ResponseFriendRequestAsync(string gamertag, string friendGamertag, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/DeleteFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/DeleteFriendRequestResponse")]
        int DeleteFriendRequest(string gamertag, string friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/DeleteFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/DeleteFriendRequestResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendRequestAsync(string gamertag, string friend);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendRequestManagerChannel : TestsServer.SpiderClueService.IFriendRequestManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendRequestManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.IFriendRequestManager>, TestsServer.SpiderClueService.IFriendRequestManager {
        
        public FriendRequestManagerClient() {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetFriendsRequest(string gamertag) {
            return base.Channel.GetFriendsRequest(gamertag);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFriendsRequestAsync(string gamertag) {
            return base.Channel.GetFriendsRequestAsync(gamertag);
        }
        
        public int CreateFriendRequest(string gamertag, string friendGamertag) {
            return base.Channel.CreateFriendRequest(gamertag, friendGamertag);
        }
        
        public System.Threading.Tasks.Task<int> CreateFriendRequestAsync(string gamertag, string friendGamertag) {
            return base.Channel.CreateFriendRequestAsync(gamertag, friendGamertag);
        }
        
        public int ResponseFriendRequest(string gamertag, string friendGamertag, string response) {
            return base.Channel.ResponseFriendRequest(gamertag, friendGamertag, response);
        }
        
        public System.Threading.Tasks.Task<int> ResponseFriendRequestAsync(string gamertag, string friendGamertag, string response) {
            return base.Channel.ResponseFriendRequestAsync(gamertag, friendGamertag, response);
        }
        
        public int DeleteFriendRequest(string gamertag, string friend) {
            return base.Channel.DeleteFriendRequest(gamertag, friend);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendRequestAsync(string gamertag, string friend) {
            return base.Channel.DeleteFriendRequestAsync(gamertag, friend);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.ILobbyManager", CallbackContract=typeof(TestsServer.SpiderClueService.ILobbyManagerCallback))]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ConnectToLobby")]
        void ConnectToLobby(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ConnectToLobby")]
        System.Threading.Tasks.Task ConnectToLobbyAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/KickPlayer")]
        void KickPlayer(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/KickPlayer")]
        System.Threading.Tasks.Task KickPlayerAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/BeginMatch")]
        void BeginMatch(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/BeginMatch")]
        System.Threading.Tasks.Task BeginMatchAsync(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/IsOwnerOfTheMatch", ReplyAction="http://tempuri.org/ILobbyManager/IsOwnerOfTheMatchResponse")]
        bool IsOwnerOfTheMatch(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/IsOwnerOfTheMatch", ReplyAction="http://tempuri.org/ILobbyManager/IsOwnerOfTheMatchResponse")]
        System.Threading.Tasks.Task<bool> IsOwnerOfTheMatchAsync(string gamertag, string matchCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/KickPlayerFromMatch", ReplyAction="http://tempuri.org/ILobbyManager/KickPlayerFromMatchResponse")]
        void KickPlayerFromMatch(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/StartGame", ReplyAction="http://tempuri.org/ILobbyManager/StartGameResponse")]
        void StartGame();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : TestsServer.SpiderClueService.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<TestsServer.SpiderClueService.ILobbyManager>, TestsServer.SpiderClueService.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToLobby(string gamertag) {
            base.Channel.ConnectToLobby(gamertag);
        }
        
        public System.Threading.Tasks.Task ConnectToLobbyAsync(string gamertag) {
            return base.Channel.ConnectToLobbyAsync(gamertag);
        }
        
        public void KickPlayer(string gamertag) {
            base.Channel.KickPlayer(gamertag);
        }
        
        public System.Threading.Tasks.Task KickPlayerAsync(string gamertag) {
            return base.Channel.KickPlayerAsync(gamertag);
        }
        
        public void BeginMatch(string matchCode) {
            base.Channel.BeginMatch(matchCode);
        }
        
        public System.Threading.Tasks.Task BeginMatchAsync(string matchCode) {
            return base.Channel.BeginMatchAsync(matchCode);
        }
        
        public bool IsOwnerOfTheMatch(string gamertag, string matchCode) {
            return base.Channel.IsOwnerOfTheMatch(gamertag, matchCode);
        }
        
        public System.Threading.Tasks.Task<bool> IsOwnerOfTheMatchAsync(string gamertag, string matchCode) {
            return base.Channel.IsOwnerOfTheMatchAsync(gamertag, matchCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IInvitationManager")]
    public interface IInvitationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInvitationManager/SendInvitation", ReplyAction="http://tempuri.org/IInvitationManager/SendInvitationResponse")]
        bool SendInvitation(string email, string matchCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInvitationManager/SendInvitation", ReplyAction="http://tempuri.org/IInvitationManager/SendInvitationResponse")]
        System.Threading.Tasks.Task<bool> SendInvitationAsync(string email, string matchCode, string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInvitationManagerChannel : TestsServer.SpiderClueService.IInvitationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvitationManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.IInvitationManager>, TestsServer.SpiderClueService.IInvitationManager {
        
        public InvitationManagerClient() {
        }
        
        public InvitationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InvitationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InvitationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InvitationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendInvitation(string email, string matchCode, string gamertag) {
            return base.Channel.SendInvitation(email, matchCode, gamertag);
        }
        
        public System.Threading.Tasks.Task<bool> SendInvitationAsync(string email, string matchCode, string gamertag) {
            return base.Channel.SendInvitationAsync(email, matchCode, gamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IMatchCreationManager")]
    public interface IMatchCreationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreationManager/CreateMatch", ReplyAction="http://tempuri.org/IMatchCreationManager/CreateMatchResponse")]
        string CreateMatch(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreationManager/CreateMatch", ReplyAction="http://tempuri.org/IMatchCreationManager/CreateMatchResponse")]
        System.Threading.Tasks.Task<string> CreateMatchAsync(string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchCreationManagerChannel : TestsServer.SpiderClueService.IMatchCreationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchCreationManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.IMatchCreationManager>, TestsServer.SpiderClueService.IMatchCreationManager {
        
        public MatchCreationManagerClient() {
        }
        
        public MatchCreationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MatchCreationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchCreationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchCreationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateMatch(string gamertag) {
            return base.Channel.CreateMatch(gamertag);
        }
        
        public System.Threading.Tasks.Task<string> CreateMatchAsync(string gamertag) {
            return base.Channel.CreateMatchAsync(gamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IGameManager", CallbackContract=typeof(TestsServer.SpiderClueService.IGameManagerCallback))]
    public interface IGameManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/MovePawn")]
        void MovePawn(int column, int row, string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/MovePawn")]
        System.Threading.Tasks.Task MovePawnAsync(int column, int row, string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/RollDice", ReplyAction="http://tempuri.org/IGameManager/RollDiceResponse")]
        int RollDice(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/RollDice", ReplyAction="http://tempuri.org/IGameManager/RollDiceResponse")]
        System.Threading.Tasks.Task<int> RollDiceAsync(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ConnectGamerToGameBoard")]
        void ConnectGamerToGameBoard(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ConnectGamerToGameBoard")]
        System.Threading.Tasks.Task ConnectGamerToGameBoardAsync(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/MakeFinalAccusation")]
        void MakeFinalAccusation(string[] cards, string matchCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/MakeFinalAccusation")]
        System.Threading.Tasks.Task MakeFinalAccusationAsync(string[] cards, string matchCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ShowCommonAccusation")]
        void ShowCommonAccusation(string[] accusation, string matchCode, string accuser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ShowCommonAccusation")]
        System.Threading.Tasks.Task ShowCommonAccusationAsync(string[] accusation, string matchCode, string accuser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ShowCard")]
        void ShowCard(GameService.Contracts.Card card, string matchCode, string accuser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ShowCard")]
        System.Threading.Tasks.Task ShowCardAsync(GameService.Contracts.Card card, string matchCode, string accuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetDeck", ReplyAction="http://tempuri.org/IGameManager/GetDeckResponse")]
        GameService.Contracts.Card[] GetDeck(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetDeck", ReplyAction="http://tempuri.org/IGameManager/GetDeckResponse")]
        System.Threading.Tasks.Task<GameService.Contracts.Card[]> GetDeckAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/EndGame", ReplyAction="http://tempuri.org/IGameManager/EndGameResponse")]
        void EndGame(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/EndGame", ReplyAction="http://tempuri.org/IGameManager/EndGameResponse")]
        System.Threading.Tasks.Task EndGameAsync(string matchCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveFinalAccusationOption", ReplyAction="http://tempuri.org/IGameManager/ReceiveFinalAccusationOptionResponse")]
        void ReceiveFinalAccusationOption(bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveCommonAccusationOption", ReplyAction="http://tempuri.org/IGameManager/ReceiveCommonAccusationOptionResponse")]
        void ReceiveCommonAccusationOption(bool isEnabled, GameService.Contracts.Door door);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveCommonAccusationByOtherGamer", ReplyAction="http://tempuri.org/IGameManager/ReceiveCommonAccusationByOtherGamerResponse")]
        void ReceiveCommonAccusationByOtherGamer(string[] accusation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/RequestShowCard", ReplyAction="http://tempuri.org/IGameManager/RequestShowCardResponse")]
        void RequestShowCard(GameService.Contracts.Card[] cards, string accuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceivePawnsMove", ReplyAction="http://tempuri.org/IGameManager/ReceivePawnsMoveResponse")]
        void ReceivePawnsMove(GameService.Contracts.Pawn pawn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveTurn", ReplyAction="http://tempuri.org/IGameManager/ReceiveTurnResponse")]
        void ReceiveTurn(bool isYourTurn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveInvalidMove", ReplyAction="http://tempuri.org/IGameManager/ReceiveInvalidMoveResponse")]
        void ReceiveInvalidMove();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/LeaveGameBoard", ReplyAction="http://tempuri.org/IGameManager/LeaveGameBoardResponse")]
        void LeaveGameBoard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ShowNobodyAnswers", ReplyAction="http://tempuri.org/IGameManager/ShowNobodyAnswersResponse")]
        void ShowNobodyAnswers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveCardAccused", ReplyAction="http://tempuri.org/IGameManager/ReceiveCardAccusedResponse")]
        void ReceiveCardAccused(GameService.Contracts.Card card);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveWinner", ReplyAction="http://tempuri.org/IGameManager/ReceiveWinnerResponse")]
        void ReceiveWinner(string winnerGamertag, string gamerIcon);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerChannel : TestsServer.SpiderClueService.IGameManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerClient : System.ServiceModel.DuplexClientBase<TestsServer.SpiderClueService.IGameManager>, TestsServer.SpiderClueService.IGameManager {
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void MovePawn(int column, int row, string gamertag, string matchCode) {
            base.Channel.MovePawn(column, row, gamertag, matchCode);
        }
        
        public System.Threading.Tasks.Task MovePawnAsync(int column, int row, string gamertag, string matchCode) {
            return base.Channel.MovePawnAsync(column, row, gamertag, matchCode);
        }
        
        public int RollDice(string matchCode) {
            return base.Channel.RollDice(matchCode);
        }
        
        public System.Threading.Tasks.Task<int> RollDiceAsync(string matchCode) {
            return base.Channel.RollDiceAsync(matchCode);
        }
        
        public void ConnectGamerToGameBoard(string gamertag, string matchCode) {
            base.Channel.ConnectGamerToGameBoard(gamertag, matchCode);
        }
        
        public System.Threading.Tasks.Task ConnectGamerToGameBoardAsync(string gamertag, string matchCode) {
            return base.Channel.ConnectGamerToGameBoardAsync(gamertag, matchCode);
        }
        
        public void MakeFinalAccusation(string[] cards, string matchCode, string gamertag) {
            base.Channel.MakeFinalAccusation(cards, matchCode, gamertag);
        }
        
        public System.Threading.Tasks.Task MakeFinalAccusationAsync(string[] cards, string matchCode, string gamertag) {
            return base.Channel.MakeFinalAccusationAsync(cards, matchCode, gamertag);
        }
        
        public void ShowCommonAccusation(string[] accusation, string matchCode, string accuser) {
            base.Channel.ShowCommonAccusation(accusation, matchCode, accuser);
        }
        
        public System.Threading.Tasks.Task ShowCommonAccusationAsync(string[] accusation, string matchCode, string accuser) {
            return base.Channel.ShowCommonAccusationAsync(accusation, matchCode, accuser);
        }
        
        public void ShowCard(GameService.Contracts.Card card, string matchCode, string accuser) {
            base.Channel.ShowCard(card, matchCode, accuser);
        }
        
        public System.Threading.Tasks.Task ShowCardAsync(GameService.Contracts.Card card, string matchCode, string accuser) {
            return base.Channel.ShowCardAsync(card, matchCode, accuser);
        }
        
        public GameService.Contracts.Card[] GetDeck(string gamertag) {
            return base.Channel.GetDeck(gamertag);
        }
        
        public System.Threading.Tasks.Task<GameService.Contracts.Card[]> GetDeckAsync(string gamertag) {
            return base.Channel.GetDeckAsync(gamertag);
        }
        
        public void EndGame(string matchCode) {
            base.Channel.EndGame(matchCode);
        }
        
        public System.Threading.Tasks.Task EndGameAsync(string matchCode) {
            return base.Channel.EndGameAsync(matchCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.ISessionManager")]
    public interface ISessionManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManager/Connect", ReplyAction="http://tempuri.org/ISessionManager/ConnectResponse")]
        int Connect(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManager/Connect", ReplyAction="http://tempuri.org/ISessionManager/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManager/Disconnect", ReplyAction="http://tempuri.org/ISessionManager/DisconnectResponse")]
        void Disconnect(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManager/Disconnect", ReplyAction="http://tempuri.org/ISessionManager/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManager/IsGamerAlreadyOnline", ReplyAction="http://tempuri.org/ISessionManager/IsGamerAlreadyOnlineResponse")]
        bool IsGamerAlreadyOnline(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManager/IsGamerAlreadyOnline", ReplyAction="http://tempuri.org/ISessionManager/IsGamerAlreadyOnlineResponse")]
        System.Threading.Tasks.Task<bool> IsGamerAlreadyOnlineAsync(string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionManagerChannel : TestsServer.SpiderClueService.ISessionManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.ISessionManager>, TestsServer.SpiderClueService.ISessionManager {
        
        public SessionManagerClient() {
        }
        
        public SessionManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Connect(string gamertag) {
            return base.Channel.Connect(gamertag);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string gamertag) {
            return base.Channel.ConnectAsync(gamertag);
        }
        
        public void Disconnect(string gamertag) {
            base.Channel.Disconnect(gamertag);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string gamertag) {
            return base.Channel.DisconnectAsync(gamertag);
        }
        
        public bool IsGamerAlreadyOnline(string gamertag) {
            return base.Channel.IsGamerAlreadyOnline(gamertag);
        }
        
        public System.Threading.Tasks.Task<bool> IsGamerAlreadyOnlineAsync(string gamertag) {
            return base.Channel.IsGamerAlreadyOnlineAsync(gamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IChatManager", CallbackContract=typeof(TestsServer.SpiderClueService.IChatManagerCallback))]
    public interface IChatManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/ConnectToChat")]
        void ConnectToChat(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/ConnectToChat")]
        System.Threading.Tasks.Task ConnectToChatAsync(string gamertag, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/DisconnectFromChat", ReplyAction="http://tempuri.org/IChatManager/DisconnectFromChatResponse")]
        void DisconnectFromChat(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/DisconnectFromChat", ReplyAction="http://tempuri.org/IChatManager/DisconnectFromChatResponse")]
        System.Threading.Tasks.Task DisconnectFromChatAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/BroadcastMessage")]
        void BroadcastMessage(string matchCode, GameService.Contracts.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/BroadcastMessage")]
        System.Threading.Tasks.Task BroadcastMessageAsync(string matchCode, GameService.Contracts.Message message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/ReceiveMessages", ReplyAction="http://tempuri.org/IChatManager/ReceiveMessagesResponse")]
        void ReceiveMessages(GameService.Contracts.Message[] messages);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerChannel : TestsServer.SpiderClueService.IChatManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatManagerClient : System.ServiceModel.DuplexClientBase<TestsServer.SpiderClueService.IChatManager>, TestsServer.SpiderClueService.IChatManager {
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToChat(string gamertag, string matchCode) {
            base.Channel.ConnectToChat(gamertag, matchCode);
        }
        
        public System.Threading.Tasks.Task ConnectToChatAsync(string gamertag, string matchCode) {
            return base.Channel.ConnectToChatAsync(gamertag, matchCode);
        }
        
        public void DisconnectFromChat(string gamertag) {
            base.Channel.DisconnectFromChat(gamertag);
        }
        
        public System.Threading.Tasks.Task DisconnectFromChatAsync(string gamertag) {
            return base.Channel.DisconnectFromChatAsync(gamertag);
        }
        
        public void BroadcastMessage(string matchCode, GameService.Contracts.Message message) {
            base.Channel.BroadcastMessage(matchCode, message);
        }
        
        public System.Threading.Tasks.Task BroadcastMessageAsync(string matchCode, GameService.Contracts.Message message) {
            return base.Channel.BroadcastMessageAsync(matchCode, message);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IWinnersManager")]
    public interface IWinnersManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWinnersManager/GetTopGlobalWinners", ReplyAction="http://tempuri.org/IWinnersManager/GetTopGlobalWinnersResponse")]
        GameService.Contracts.Winner[] GetTopGlobalWinners();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWinnersManager/GetTopGlobalWinners", ReplyAction="http://tempuri.org/IWinnersManager/GetTopGlobalWinnersResponse")]
        System.Threading.Tasks.Task<GameService.Contracts.Winner[]> GetTopGlobalWinnersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWinnersManagerChannel : TestsServer.SpiderClueService.IWinnersManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WinnersManagerClient : System.ServiceModel.ClientBase<TestsServer.SpiderClueService.IWinnersManager>, TestsServer.SpiderClueService.IWinnersManager {
        
        public WinnersManagerClient() {
        }
        
        public WinnersManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WinnersManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WinnersManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WinnersManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GameService.Contracts.Winner[] GetTopGlobalWinners() {
            return base.Channel.GetTopGlobalWinners();
        }
        
        public System.Threading.Tasks.Task<GameService.Contracts.Winner[]> GetTopGlobalWinnersAsync() {
            return base.Channel.GetTopGlobalWinnersAsync();
        }
    }
}
